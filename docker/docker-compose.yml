version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Backend API
  api:
    build:
      context: ../server
      dockerfile: ../docker/Dockerfile.api
    container_name: ecommerce_api
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      DB_USER: ecommerce_user
      DB_PASSWORD: ecommerce_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      RAZORPAY_KEY_ID: your_razorpay_key_id
      RAZORPAY_KEY_SECRET: your_razorpay_key_secret
      GCP_PROJECT_ID: your_gcp_project_id
      GCP_BUCKET_NAME: your_gcp_bucket_name
      GCP_KEY_FILE: /app/gcp-key.json
      CLIENT_URL: http://localhost:3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "5001:5000"
    volumes:
      - ../server:/app
      - /app/node_modules
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Frontend React App
  client:
    build:
      context: ../client
      dockerfile: ../docker/Dockerfile.client
    container_name: ecommerce_client
    environment:
      REACT_APP_API_URL: http://localhost:5001/api
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:3000"
    volumes:
      - ../client:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - client
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: ecommerce_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - ecommerce_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge 